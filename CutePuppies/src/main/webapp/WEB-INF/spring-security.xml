<?xml version="1.0" encoding="UTF-8"?>
<!-- #1 - Make security the default namespace -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/security
 http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!-- Expression Handler bean definition START -->
    <beans:bean id="webexpressionHandler"
                class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
    <!-- Expression Handler bean definition END -->

    <!-- PASSWORD ENCODER BEAN CHANGES START -->
    <beans:bean id="encoder"
                class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!-- PASSWORD ENCODER BEAN CHANGES END -->

    <!-- #2 - Make sure we don't need authorization to get to the login or home page -->
    <http pattern="/login" security="none" />
    <http pattern="/blog/**" security="none" />
    <http pattern="/post/**" security="none" />
    <http pattern="/categories" security="none" />
    <http pattern="/tags" security="none" />
    <http pattern="/" security="none" />
    <http pattern="/ajax/getPagePosts" security="none" />
    <http pattern="/ajax/getCategories" security="none" />
    <http pattern="/ajax/getTags/{onlyPublished}" security="none" />
    <http pattern="/css/**" security="none" />
    <http pattern="/js/**" security="none" />
    <http pattern="/img/**" security="none" />    
    <!--<http pattern="/**" security="none" />-->

    <!-- #3 - Authentication/login form and protected endpoint configuration -->
    <http auto-config="true" use-expressions="false">
        <!-- #3a - Login via html form, use Spring to do the security check -->
        <!-- #3b - Use the login page at this endpoint -->
        <!-- #3c - Redirect here if login fails -->
        <form-login login-processing-url="/j_spring_security_check"
                    login-page="/login"
                    authentication-failure-url="/login?login_error=1"/>
        <!-- #3d - Go back to home page when user logs out -->
        <logout logout-success-url="/" />
        <!-- #3e - Access to these endpoints require admin role -->
        <!-- Multiple roles are allowed - the access list is comma-delimited -->
        <intercept-url pattern="/admin" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/dashboard" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/managePosts" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/manageStaticPages" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/getStaticPages/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/getAllPosts/**" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/ajax/edit/getPost/**" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/ajax/edit/getContent/**" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/edit/post" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/edit/post/**" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/edit/static" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/edit/static/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/addPost" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/ajax/addContent" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/ajax/archivePost/**" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/ajax/archiveContent/**" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/ajax/addTags" access="ROLE_ADMIN,ROLE_AUTHOR" />
        <intercept-url pattern="/admin/addCategories" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/editCategories/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/editTags/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/deleteCategories/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/deleteTags/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/manageUsers" access="ROLE_ADMIN" />
        <intercept-url pattern="/manageUsers/userList" access="ROLE_ADMIN" />
        <intercept-url pattern="/manageUsers/add" access="ROLE_ADMIN" />
        <intercept-url pattern="/manageUsers/update" access="ROLE_ADMIN" />
        <intercept-url pattern="/manageUsers/remove/**" access="ROLE_ADMIN" />
        
        <intercept-url pattern="/admin/manageTags" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/manageCategories" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/Tags" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/Tags/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/Categories" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/Categories/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/admin/ajax/getStaticPages/**" access="ROLE_ADMIN" />
        
        <intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
        
        <!-- For Spring Security Hashing Passwords Examples -->
        <intercept-url pattern="/user/**" access="ROLE_ADMIN" />
        <!--#3f - Access to all other controller endpoints require user role--> 
        <!--<intercept-url pattern="/**" access="ROLE_ADMIN" />-->
    </http>
    <!-- #4 - Authentication Manager config -->
    <authentication-manager>
        <!-- #4a - Authentication Provider - we’re using the JDBC service -->
        <authentication-provider>
            <!-- AUTHENTICATION-PROVIDER CHANGES START -->
            <password-encoder ref="encoder"/>
            <!-- AUTHENTICATION-PROVIDER CHANGES END -->
            <!-- #4b - Tells Spring Security where to look for user information -->
            <!-- We use the dataSource defined in spring-persistence.xml -->
            <!-- and we give Spring Security the query to use to lookup -->
            <!-- the user’s credentials (get the password from the users -->
            <!-- tables and get the roles from the authorities table) -->
            <jdbc-user-service id="userService"
                               data-source-ref="dataSource"
                               users-by-username-query=
 "select UserName as username, UserPassword as password, CASE WHEN DeletedDate IS NULL THEN 1 ELSE 0 END from User where UserName=?"
                               authorities-by-username-query=
 "select UserName as username, RoleCode as authority from User where UserName=?" />
        </authentication-provider>
    </authentication-manager>
</beans:beans>